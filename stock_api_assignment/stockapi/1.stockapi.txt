mak@mak-Aspire-A515-51G:~$ mkdir stock
mak@mak-Aspire-A515-51G:~$ cd stock/
mak@mak-Aspire-A515-51G:~/stock$ virtualenv venv
mak@mak-Aspire-A515-51G:~/stock$ source venv/bin/activate

rest/restapp/admin.py
from django.contrib import admin
from .models import Stock

# Register your models here.
admin.site.register(Stock)

rest/restapp/models.py
from django.db import models

# Create your models here.
class Stock(models.Model):
    stock_name = models.CharField(max_length = 200)
    stock_price = models.CharField(max_length = 200)
    stock_gain = models.CharField(max_length = 200)
    market_name = models.CharField(max_length = 200)

rest/restapp/serializers.py

from .models import Stock
from rest_framework import serializers
from django.contrib.auth import get_user_model

class StockSerializer(serializers.ModelSerializer):
    class Meta:
        model = Stock
        #exclude = ('')
        depth = 3
        fields = '__all__'


class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only= True)
    def create(self, validate_data):
        user = get_user_model().objects.create(username= validate_data['username'])
        user.set_password(validate_data['password'])
        user.save()
        return user

    class Meta:
        model = get_user_model()
        fields = ('username', 'password')

rest/restapp/views.py
from django.shortcuts import render
from rest_framework import viewsets
from .serializers import StockSerializer,UserSerializer
from .models import Stock
from rest_framework import filters
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.generics import CreateAPIView
from django.contrib.auth import get_user_model
# Create your views here.
class StockViewSet(viewsets.ModelViewSet):
    permission_classes = (IsAuthenticated, )
    queryset = Stock.objects.all().order_by('stock_gain')
    serializer_class = StockSerializer

    filter_backends = (filters.DjangoFilterBackend, filters.OrderingFilter,filters.SearchFilter)
    filter_fields = ('market_name',)
    search_fields = ('stock_name',)
    ordering = ('stock_gain',)


class Createuserview(CreateAPIView):
    model = get_user_model()
    permission_classes = (AllowAny, )
    serializer_class = UserSerializer


rest/rest/urls.py
"""rest URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/1.11/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.conf.urls import url, include
    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))
"""
from django.conf.urls import include,url
from django.contrib import admin
from rest_framework import routers
from restapp.views import StockViewSet
from restapp import views

router = routers.DefaultRouter()
router.register(r'stock', views.StockViewSet)
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^register/$', views.Createuserview.as_view(), name='user'),
    url(r'^api-auth/', include('rest_framework.urls',namespace='rest_framework')),
    url(r'^', include(router.urls)),
]

rest/rest/settings.py
"""
Django settings for rest project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8i^4a82b3-qih$gv6q#g9z&16o)ykqprzvb_^e4^gn7r*z-cto'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'restapp',
    'rest_framework',
    'django_filters',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rest.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rest.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
LOGIN_REDIRECT_URL='/stock'
